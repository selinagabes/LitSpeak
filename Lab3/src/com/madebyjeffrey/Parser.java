
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package com.madebyjeffrey;

import java_cup.runtime.*;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\005\000\002\002\004\000\002\002" +
    "\006\000\002\034\005\000\002\034\004\000\002\036\003" +
    "\000\002\003\005\000\002\003\006\000\002\004\011\000" +
    "\002\004\010\000\002\005\004\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\013\005\000\002\013\004\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\035\003" +
    "\000\002\015\007\000\002\015\006\000\002\016\004\000" +
    "\002\020\004\000\002\020\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\022\005\000\002\022\006\000" +
    "\002\022\003\000\002\022\003\000\002\023\006\000\002" +
    "\023\005\000\002\024\004\000\002\024\005\000\002\024" +
    "\004\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\007\000\002\027\005\000\002\027\004\000" +
    "\002\030\005\000\002\031\006\000\002\031\011\000\002" +
    "\031\010\000\002\031\013\000\002\032\005\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\004\006\001\002\000\004\002\200\001" +
    "\002\000\006\054\015\061\012\001\002\000\004\054\007" +
    "\001\002\000\004\037\010\001\002\000\010\011\011\054" +
    "\ufffb\061\ufffb\001\002\000\006\054\ufffa\061\ufffa\001\002" +
    "\000\004\054\176\001\002\000\004\005\173\001\002\000" +
    "\004\054\015\001\002\000\004\040\016\001\002\000\006" +
    "\041\020\054\022\001\002\000\006\041\ufff5\043\167\001" +
    "\002\000\004\044\164\001\002\000\004\041\031\001\002" +
    "\000\004\044\023\001\002\000\012\012\024\013\027\014" +
    "\025\015\026\001\002\000\034\006\ufff3\025\ufff3\026\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\041\ufff3\043\ufff3\050\ufff3\001\002\000\034\006\ufff1" +
    "\025\ufff1\026\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\041\ufff1\043\ufff1\050\ufff1\001\002" +
    "\000\034\006\ufff0\025\ufff0\026\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\041\ufff0\043\ufff0" +
    "\050\ufff0\001\002\000\034\006\ufff2\025\ufff2\026\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\041\ufff2\043\ufff2\050\ufff2\001\002\000\006\041\ufff4\043" +
    "\ufff4\001\002\000\004\044\032\001\002\000\012\012\024" +
    "\013\027\014\025\015\026\001\002\000\004\035\034\001" +
    "\002\000\022\011\055\014\043\024\046\027\042\030\054" +
    "\035\034\053\041\060\040\001\002\000\004\005\ufff9\001" +
    "\002\000\014\025\uffe5\026\uffe5\036\uffe5\037\uffe5\050\uffe5" +
    "\001\002\000\004\036\163\001\002\000\014\025\uffe4\026" +
    "\uffe4\036\uffe4\037\uffe4\050\uffe4\001\002\000\014\006\127" +
    "\031\131\032\135\033\134\034\130\001\002\000\016\016" +
    "\075\017\102\045\074\053\105\054\104\062\073\001\002" +
    "\000\004\053\154\001\002\000\014\025\uffeb\026\uffeb\036" +
    "\uffeb\037\uffeb\050\uffeb\001\002\000\014\025\uffe6\026\uffe6" +
    "\036\uffe6\037\uffe6\050\uffe6\001\002\000\016\016\075\017" +
    "\102\045\074\053\105\054\104\062\073\001\002\000\014" +
    "\025\uffe8\026\uffe8\036\uffe8\037\uffe8\050\uffe8\001\002\000" +
    "\014\025\uffe9\026\uffe9\036\uffe9\037\uffe9\050\uffe9\001\002" +
    "\000\014\025\uffea\026\uffea\036\uffea\037\uffea\050\uffea\001" +
    "\002\000\004\040\071\001\002\000\006\036\uffec\037\067" +
    "\001\002\000\004\040\057\001\002\000\014\025\uffe3\026" +
    "\uffe3\036\uffe3\037\uffe3\050\uffe3\001\002\000\014\025\uffe7" +
    "\026\uffe7\036\uffe7\037\uffe7\050\uffe7\001\002\000\004\042" +
    "\061\001\002\000\004\041\065\001\002\000\006\042\063" +
    "\054\062\001\002\000\004\042\064\001\002\000\004\041" +
    "\uffc5\001\002\000\004\041\uffc6\001\002\000\004\037\066" +
    "\001\002\000\014\025\uffc7\026\uffc7\036\uffc7\037\uffc7\050" +
    "\uffc7\001\002\000\024\011\055\014\043\024\046\027\042" +
    "\030\054\035\034\036\uffed\053\041\060\040\001\002\000" +
    "\004\036\uffee\001\002\000\022\016\075\017\102\041\103" +
    "\043\077\045\074\053\105\054\104\062\073\001\002\000" +
    "\074\006\uffd4\011\uffd4\014\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\041\uffd4\043\uffd4\045\uffd4\050\uffd4\053" +
    "\uffd4\054\uffd4\060\uffd4\062\uffd4\001\002\000\074\006\uffd0" +
    "\011\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\041\uffd0\043\uffd0\045\uffd0\050\uffd0\053\uffd0\054\uffd0" +
    "\060\uffd0\062\uffd0\001\002\000\074\006\uffd8\011\uffd8\014" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8" +
    "\043\uffd8\045\uffd8\050\uffd8\053\uffd8\054\uffd8\060\uffd8\062" +
    "\uffd8\001\002\000\074\006\uffc9\011\uffc9\014\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9\043\uffc9\045" +
    "\uffc9\050\uffc9\053\uffc9\054\uffc9\060\uffc9\062\uffc9\001\002" +
    "\000\004\041\124\001\002\000\016\016\075\017\102\045" +
    "\074\053\105\054\104\062\073\001\002\000\032\016\075" +
    "\017\102\020\113\021\111\022\116\023\115\041\uffca\043" +
    "\077\045\074\053\105\054\104\062\073\001\002\000\074" +
    "\006\uffd1\011\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\041\uffd1\043\uffd1\045\uffd1\050\uffd1\053\uffd1" +
    "\054\uffd1\060\uffd1\062\uffd1\001\002\000\074\006\uffc8\011" +
    "\uffc8\014\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\041\uffc8\043\uffc8\045\uffc8\050\uffc8\053\uffc8\054\uffc8\060" +
    "\uffc8\062\uffc8\001\002\000\074\006\uffce\011\uffce\014\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\041\uffce\043" +
    "\uffce\045\uffce\050\uffce\053\uffce\054\uffce\060\uffce\062\uffce" +
    "\001\002\000\076\006\uffd6\011\uffd6\014\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\107\041\uffd6\043\uffd6" +
    "\045\uffd6\050\uffd6\053\uffd6\054\uffd6\060\uffd6\062\uffd6\001" +
    "\002\000\074\006\uffd7\011\uffd7\014\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\041\uffd7\043\uffd7\045\uffd7\050" +
    "\uffd7\053\uffd7\054\uffd7\060\uffd7\062\uffd7\001\002\000\074" +
    "\006\uffd5\011\uffd5\014\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\041\uffd5\043\uffd5\045\uffd5\050\uffd5\053\uffd5" +
    "\054\uffd5\060\uffd5\062\uffd5\001\002\000\016\016\075\017" +
    "\102\045\074\053\105\054\104\062\073\001\002\000\014" +
    "\020\113\021\111\022\116\023\115\041\112\001\002\000" +
    "\014\016\uffbc\017\uffbc\045\uffbc\053\uffbc\054\uffbc\001\002" +
    "\000\074\006\uffd2\011\uffd2\014\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\041\uffd2\043\uffd2\045\uffd2\050\uffd2" +
    "\053\uffd2\054\uffd2\060\uffd2\062\uffd2\001\002\000\014\016" +
    "\uffbd\017\uffbd\045\uffbd\053\uffbd\054\uffbd\001\002\000\014" +
    "\016\075\017\102\045\074\053\105\054\120\001\002\000" +
    "\014\016\uffba\017\uffba\045\uffba\053\uffba\054\uffba\001\002" +
    "\000\014\016\uffbb\017\uffbb\045\uffbb\053\uffbb\054\uffbb\001" +
    "\002\000\074\006\uffd3\011\uffd3\014\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\041\uffd3\043\uffd3\045\uffd3\050" +
    "\uffd3\053\uffd3\054\uffd3\060\uffd3\062\uffd3\001\002\000\074" +
    "\006\uffd6\011\uffd6\014\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\041\uffd6\043\uffd6\045\uffd6\050\uffd6\053\uffd6" +
    "\054\uffd6\060\uffd6\062\uffd6\001\002\000\004\041\uffcd\001" +
    "\002\000\032\016\075\017\102\020\113\021\111\022\116" +
    "\023\115\041\uffcb\043\077\045\074\053\105\054\104\062" +
    "\073\001\002\000\004\041\uffcc\001\002\000\074\006\uffcf" +
    "\011\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\041\uffcf\043\uffcf\045\uffcf\050\uffcf\053\uffcf\054\uffcf" +
    "\060\uffcf\062\uffcf\001\002\000\022\011\055\014\043\024" +
    "\046\027\042\030\054\035\034\053\041\060\040\001\002" +
    "\000\044\006\127\011\uffbe\014\uffbe\020\113\021\111\022" +
    "\116\023\115\024\uffbe\027\uffbe\030\uffbe\031\131\032\135" +
    "\033\134\034\130\035\uffbe\053\uffbe\060\uffbe\001\002\000" +
    "\016\016\075\017\102\045\074\053\105\054\104\062\073" +
    "\001\002\000\030\016\uffd9\017\uffd9\025\uffd9\026\uffd9\036" +
    "\uffd9\037\uffd9\045\uffd9\050\uffd9\053\uffd9\054\uffd9\062\uffd9" +
    "\001\002\000\030\016\uffdc\017\uffdc\025\uffdc\026\uffdc\036" +
    "\uffdc\037\uffdc\045\uffdc\050\uffdc\053\uffdc\054\uffdc\062\uffdc" +
    "\001\002\000\030\016\uffdd\017\uffdd\025\uffdd\026\uffdd\036" +
    "\uffdd\037\uffdd\045\uffdd\050\uffdd\053\uffdd\054\uffdd\062\uffdd" +
    "\001\002\000\016\016\075\017\102\045\074\053\105\054" +
    "\104\062\073\001\002\000\030\016\uffda\017\uffda\025\uffda" +
    "\026\uffda\036\uffda\037\uffda\045\uffda\050\uffda\053\uffda\054" +
    "\uffda\062\uffda\001\002\000\030\016\uffdb\017\uffdb\025\uffdb" +
    "\026\uffdb\036\uffdb\037\uffdb\045\uffdb\050\uffdb\053\uffdb\054" +
    "\uffdb\062\uffdb\001\002\000\032\011\uffbf\014\uffbf\020\113" +
    "\021\111\022\116\023\115\024\uffbf\027\uffbf\030\uffbf\035" +
    "\uffbf\053\uffbf\060\uffbf\001\002\000\040\016\uffde\017\uffde" +
    "\020\113\021\111\022\116\023\115\025\uffde\026\uffde\036" +
    "\uffde\037\uffde\045\uffde\050\uffde\053\uffde\054\uffde\062\uffde" +
    "\001\002\000\010\025\143\026\142\050\141\001\002\000" +
    "\014\025\uffc3\026\uffc3\036\uffc3\037\uffc3\050\uffc3\001\002" +
    "\000\022\011\055\014\043\024\046\027\042\030\054\035" +
    "\034\053\041\060\040\001\002\000\016\016\075\017\102" +
    "\045\074\053\105\054\104\062\073\001\002\000\022\011" +
    "\055\014\043\024\046\027\042\030\054\035\034\053\041" +
    "\060\040\001\002\000\006\026\147\050\146\001\002\000" +
    "\014\025\uffc2\026\uffc2\036\uffc2\037\uffc2\050\uffc2\001\002" +
    "\000\022\011\055\014\043\024\046\027\042\030\054\035" +
    "\034\053\041\060\040\001\002\000\004\050\151\001\002" +
    "\000\014\025\uffc0\026\uffc0\036\uffc0\037\uffc0\050\uffc0\001" +
    "\002\000\004\050\153\001\002\000\014\025\uffc1\026\uffc1" +
    "\036\uffc1\037\uffc1\050\uffc1\001\002\000\004\044\155\001" +
    "\002\000\012\012\024\013\027\014\025\015\026\001\002" +
    "\000\026\006\127\025\uffe0\026\uffe0\031\131\032\135\033" +
    "\134\034\130\036\uffe0\037\uffe0\050\uffe0\001\002\000\014" +
    "\025\uffe1\026\uffe1\036\uffe1\037\uffe1\050\uffe1\001\002\000" +
    "\014\020\113\021\111\022\116\023\115\037\161\001\002" +
    "\000\014\025\uffc4\026\uffc4\036\uffc4\037\uffc4\050\uffc4\001" +
    "\002\000\014\025\uffdf\026\uffdf\036\uffdf\037\uffdf\050\uffdf" +
    "\001\002\000\020\002\uffef\005\uffef\025\uffef\026\uffef\036" +
    "\uffef\037\uffef\050\uffef\001\002\000\012\012\024\013\027" +
    "\014\025\015\026\001\002\000\004\035\034\001\002\000" +
    "\004\005\ufff8\001\002\000\004\054\022\001\002\000\004" +
    "\041\ufff6\001\002\000\004\005\173\001\002\000\004\002" +
    "\uffff\001\002\000\004\035\034\001\002\000\004\002\ufff7" +
    "\001\002\000\004\002\001\001\002\000\006\054\ufffd\061" +
    "\012\001\002\000\004\054\ufffe\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\012\034\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\174\001\001\000\004\004\170" +
    "\001\001\000\002\001\001\000\006\007\020\010\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\032\001" +
    "\001\000\004\012\034\001\001\000\026\006\051\012\043" +
    "\013\036\014\052\015\050\016\047\023\035\026\044\030" +
    "\046\031\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\131\020" +
    "\161\001\001\000\014\006\051\021\100\022\157\023\105" +
    "\025\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\051\021\100\022\125\023\105" +
    "\025\071\032\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\051\012\043" +
    "\013\067\014\052\015\050\016\047\023\035\026\044\030" +
    "\046\031\055\001\001\000\002\001\001\000\016\006\051" +
    "\021\100\022\077\023\105\024\075\025\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\051\021\100\022" +
    "\121\023\105\025\071\001\001\000\020\006\051\021\100" +
    "\022\077\023\105\024\120\025\071\033\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\051\021\100\022\107\023\105\025\071\001\001\000\004" +
    "\033\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\051\021\116\023\105\025\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\051" +
    "\021\100\022\077\023\105\024\122\025\071\033\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\051" +
    "\012\043\014\137\015\050\016\047\023\035\026\044\030" +
    "\046\031\055\001\001\000\010\017\131\020\132\033\113" +
    "\001\001\000\014\006\051\021\100\022\136\023\105\025" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\051\021\100\022\135\023\105\025" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\113\001\001\000\004\033\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\051\012\043\014\151" +
    "\015\050\016\047\023\035\026\044\030\046\031\055\001" +
    "\001\000\016\006\051\021\100\022\125\023\105\025\071" +
    "\032\143\001\001\000\024\006\051\012\043\014\144\015" +
    "\050\016\047\023\035\026\044\030\046\031\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\051\012" +
    "\043\014\147\015\050\016\047\023\035\026\044\030\046" +
    "\031\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\155\001\001\000\006\017\131\020\156\001\001\000" +
    "\002\001\001\000\004\033\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\164\001" +
    "\001\000\004\012\165\001\001\000\002\001\001\000\004" +
    "\010\167\001\001\000\002\001\001\000\004\005\171\001" +
    "\001\000\002\001\001\000\004\012\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\176\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // mixtape ::= mixtape_verse nochill_verse fire_verse 
            {
              String RESULT =null;
		Location mtvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location mtvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String mtv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ncvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ncvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String ncv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location fvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String fv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG0
 
		System.out.printf("public class %s { \n%s%s\n}", mtv, ncv, fv); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mixtape",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= mixtape EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mixtape ::= mixtape_verse packages nochill_verse fire_verse 
            {
              String RESULT =null;
		Location mtvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location mtvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String mtv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ncvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ncvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String ncv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location fvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String fv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG1
 
		System.out.printf("public class %s { \n%s%s\n}", mtv, ncv, fv); 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mixtape",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // packages ::= FAM IDENTIFIER packages 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG2
 System.out.printf("import java.util.%s;\n%s",id,p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("packages",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // packages ::= FAM IDENTIFIER 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG3
 System.out.printf("import java.util.%s;\n\n",id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("packages",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // line_comment ::= LINECOMMENT 
            {
              String RESULT =null;
		Location lcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String lc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4
 System.out.printf("//%s", lc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("line_comment",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mixtape_verse ::= MIXTAPE IDENTIFIER DOLLA 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG5
 RESULT = String.format("%s", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mixtape_verse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mixtape_verse ::= MIXTAPE IDENTIFIER DOLLA LINECOMMENT 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG6
 RESULT = String.format("%s", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mixtape_verse",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nochill_verse ::= IDENTIFIER LPAREN formal_homies RPAREN COLON playa block 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location fhxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location fhxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String fh = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7
 RESULT = String.format("public static %s %s(%s){\n%s\n}\n", p,String.format("%s",id),fh,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nochill_verse",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nochill_verse ::= IDENTIFIER LPAREN RPAREN COLON playa block 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG8
 RESULT = String.format("public static %s %s(){\n%s\n}\n", p,id,b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nochill_verse",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fire_verse ::= FIRE block 
            {
              String RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9
 RESULT = String.format("public static void main(String[] args){\n%s\n}", b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fire_verse",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_homies ::= formal_homie HASHTAG formal_homie 
            {
              String RESULT =null;
		Location fhxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fhxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String fh = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fh2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fh2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String fh2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10
 RESULT = String.format("%s,%s", fh,fh2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_homies",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_homies ::= formal_homie 
            {
              String RESULT =null;
		Location fhxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fhxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String fh = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11
 RESULT = String.format("%s", fh); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_homies",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_homie ::= IDENTIFIER COLON playa 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG12
 RESULT = String.format("%s %s", p, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_homie",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // playa ::= BONES 
            {
              String RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13
 RESULT = "int"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("playa",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // playa ::= WORDONTHASTREET 
            {
              String RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14
 RESULT = "String"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("playa",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // playa ::= DAB 
            {
              String RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15
 RESULT = "var"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("playa",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // playa ::= PARTY 
            {
              String RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG16
 RESULT = "boolean"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("playa",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block ::= TURNUP block_verse DEAD 
            {
              String RESULT =null;
		Location bvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String bv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG17
 RESULT = String.format("%s", bv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block_verse ::= track DOLLA block_verse 
            {
              String RESULT =null;
		Location trxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location trxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String tr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18
 RESULT = String.format("%s;\n%s", tr, bv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_verse",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // block_verse ::= track DOLLA 
            {
              String RESULT =null;
		Location trxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location trxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String tr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG19
 RESULT = String.format("%s;", tr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_verse",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // block_verse ::= track 
            {
              String RESULT =null;
		Location trxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location trxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String tr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20
 RESULT = String.format("%s", tr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_verse",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // track ::= block 
            {
              String RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21
 RESULT = String.format("%s", b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // track ::= local_dab_verse 
            {
              String RESULT =null;
		Location ldvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ldvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String ldv = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22
 RESULT = String.format("%s", ldv); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // track ::= aka_track 
            {
              String RESULT =null;
		Location akatxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location akatxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String akat = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23
 RESULT = String.format("%s", akat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // track ::= bounce_track 
            {
              String RESULT =null;
		Location btxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location btxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24
 RESULT = String.format("%s", bt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // track ::= check_track 
            {
              String RESULT =null;
		Location ctxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ctxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String ct = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25
 RESULT = String.format("%s", ct); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // track ::= preach_track 
            {
              String RESULT =null;
		Location ptxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ptxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26
 RESULT = String.format("%s", pt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // track ::= basedgod_call 
            {
              String RESULT =null;
		Location bgcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bgcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bgc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27
 RESULT = String.format("%s", bgc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // track ::= SUHDUDE 
            {
              String RESULT =null;
		Location sdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String sd = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28
 RESULT = "Scanner suh = new Scanner(System.in);"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // track ::= LINECOMMENT 
            {
              String RESULT =null;
		Location lsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String ls = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29
 RESULT = "//"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("track",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // wordonthastreet_lit ::= WORDONTHASTREET_LIT 
            {
              String RESULT =null;
		Location wotslxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location wotslxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String wotsl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30
 RESULT = String.format("/** **/"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wordonthastreet_lit",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // local_dab_verse ::= DAB STREETNAME COLON playa aka 
            {
              String RESULT =null;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31
 RESULT = String.format("%s %s %s", p,st,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_dab_verse",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // local_dab_verse ::= DAB STREETNAME COLON playa 
            {
              String RESULT =null;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32
 RESULT = String.format("%s %s;\n", p,st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("local_dab_verse",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aka_track ::= STREETNAME aka 
            {
              String RESULT =null;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String st = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33
 RESULT = String.format("%s %s;\n", a,st); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka_track",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aka ::= AKA beat_left 
            {
              String RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34
 RESULT = String.format(" = %s", bl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aka ::= aka_check 
            {
              String RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35
 RESULT = String.format("%s",a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aka_check ::= WEAK 
            {
              String RESULT =null;
		//@@CUPDBG36
 RESULT = " < "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka_check",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aka_check ::= WINNING 
            {
              String RESULT =null;
		//@@CUPDBG37
 RESULT = " > "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka_check",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aka_check ::= ONMYLEVEL 
            {
              String RESULT =null;
		//@@CUPDBG38
 RESULT = " == "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka_check",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aka_check ::= OTHERLEVEL 
            {
              String RESULT =null;
		//@@CUPDBG39
 RESULT = " != "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aka_check",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // beat ::= DIGIT 
            {
              String RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40
 RESULT = String.format("%s", d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // beat ::= STREETNAME 
            {
              String RESULT =null;
		Location snxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location snxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String sn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG41
 RESULT = String.format("%s", sn); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // beat ::= IDENTIFIER 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG42
 RESULT = String.format("%s", id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // beat ::= basedgod_call 
            {
              String RESULT =null;
		Location bgcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bgcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bgc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG43
 RESULT = String.format("%s", bgc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // beat ::= party_literal 
            {
              String RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String pl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG44
 RESULT = String.format("%s", pl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // beat_left ::= beat_left hustle beat 
            {
              String RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location hbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location hbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String hb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bl2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bl2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bl2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG45
 RESULT = String.format("%s% %s %s", bl, hb, bl2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat_left",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // beat_left ::= IDENTIFIER LPAREN beat_left RPAREN 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG46
 RESULT = String.format("%s(%s)", id, bl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat_left",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // beat_left ::= beat 
            {
              String RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG47
 RESULT = String.format("%s", b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat_left",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // beat_left ::= DUDESUH 
            {
              String RESULT =null;
		//@@CUPDBG48
 RESULT = "suh.nextInt()"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beat_left",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // basedgod_call ::= flame LPAREN basedgod_homies RPAREN 
            {
              String RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bghxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location bghxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String bgh = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG49
 RESULT = String.format("%s(%s)", f, bgh); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_call",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // basedgod_call ::= flame LPAREN RPAREN 
            {
              String RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG50
 RESULT = String.format("%s()", f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_call",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // basedgod_homies ::= beat_left basedgod_homies 
            {
              String RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bghxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bghxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bgh = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG51
 RESULT = String.format("%s %s)", bl, bgh); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_homies",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // basedgod_homies ::= HASHTAG beat_left basedgod_homies 
            {
              String RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bghxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bghxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bgh = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52
 RESULT = String.format(",%s %s", bl, bgh); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_homies",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // basedgod_homies ::= HASHTAG beat_left 
            {
              String RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53
 RESULT = String.format(",%s", bl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_homies",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // basedgod_homies ::= beat_left 
            {
              String RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG54
 RESULT = String.format("%s", bl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("basedgod_homies",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // party_literal ::= LIT 
            {
              String RESULT =null;
		//@@CUPDBG55
 RESULT = "true"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("party_literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // party_literal ::= NOTLIT 
            {
              String RESULT =null;
		//@@CUPDBG56
 RESULT = "false"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("party_literal",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // preach_track ::= PREACH LPAREN wordonthastreetverse RPAREN DOLLA 
            {
              String RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String w = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG57
 RESULT = String.format("System.out.println(\"%s\");", w); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("preach_track",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // wordonthastreetverse ::= QM IDENTIFIER QM 
            {
              String RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG58
 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wordonthastreetverse",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // wordonthastreetverse ::= QM QM 
            {
              String RESULT =null;
		//@@CUPDBG59
 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("wordonthastreetverse",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bounce_track ::= BOUNCE beat_left DOLLA 
            {
              String RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG60
 RESULT = String.format("return %s;", bl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bounce_track",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // check_track ::= CHECK lit_beat track SON 
            {
              String RESULT =null;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG61
 RESULT = String.format("if %s\n%s", lb, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("check_track",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // check_track ::= CHECK lit_beat track REK lit_beat track SON 
            {
              String RESULT =null;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location lb2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lb2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String lb2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location t2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location t2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG62
 RESULT = String.format("if (%s)\n%s\nelse if(%s)\n%s\n", lb, t, lb2, t2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("check_track",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // check_track ::= CHECK lit_beat track YOSEWF track SON 
            {
              String RESULT =null;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location t2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location t2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG63
 RESULT = String.format("if (%s)\n%s\nelse\n%s\n", lb, t, t2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("check_track",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // check_track ::= CHECK lit_beat track REK lit_beat track YOSEWF track SON 
            {
              String RESULT =null;
		Location lbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xleft;
		Location lbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).xright;
		String lb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location lb2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lb2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String lb2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location t2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location t2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location t3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location t3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG64
 RESULT = String.format("if(%s)\n%s\nelse if(%s)\n%s\nelse\n%s", lb, t, lb2, t2,t3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("check_track",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lit_beat ::= beat_left aka beat_left 
            {
              String RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location akxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location akxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String ak = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bl2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bl2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bl2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG65
 RESULT = String.format("%s %s %s", bl, ak, bl2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lit_beat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lit_beat ::= beat_left 
            {
              String RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String bl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG66
 RESULT = String.format("%s", bl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lit_beat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // hustle ::= GETMONEY 
            {
              String RESULT =null;
		//@@CUPDBG67
 RESULT = " + "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hustle",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // hustle ::= THROWMONEY 
            {
              String RESULT =null;
		//@@CUPDBG68
 RESULT = " - "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hustle",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // hustle ::= BALLOUT 
            {
              String RESULT =null;
		//@@CUPDBG69
 RESULT = " * "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hustle",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // hustle ::= CUT 
            {
              String RESULT =null;
		//@@CUPDBG70
 RESULT = " / "; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("hustle",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
