/* The following code was generated by JFlex 1.6.1 */

package com.madebyjeffrey;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;
import java.util.stream.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/selinagabes/workspace/Lab3/lexer.flex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SQUIGGLYSTAR = 2;
  public static final int LINECOMMENT = 4;
  public static final int WORDONTHASTREET = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\10\1\11\1\1\22\0\1\56\1\6\1\17"+
    "\1\16\1\15\3\0\1\12\1\14\1\20\1\0\1\6\1\0\1\0"+
    "\1\0\12\4\1\13\1\6\3\0\1\6\1\21\1\27\1\45\1\52"+
    "\1\36\1\31\1\37\1\51\1\35\1\24\1\5\1\41\1\42\1\22"+
    "\1\47\1\46\1\30\1\5\1\44\1\33\1\26\1\34\1\53\1\50"+
    "\1\25\1\43\1\5\1\0\1\55\2\0\1\7\1\0\1\27\1\45"+
    "\1\52\1\36\1\31\1\37\1\51\1\35\1\24\1\5\1\41\1\42"+
    "\1\22\1\47\1\46\1\30\1\5\1\44\1\33\1\26\1\34\1\53"+
    "\1\50\1\25\1\43\1\5\3\0\1\54\6\0\1\10\252\0\2\23"+
    "\115\0\1\32\u1ea8\0\1\10\1\10\u0100\0\1\40\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\23\1"+
    "\1\2\1\1\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\0\3\20\1\0\4\20\2\0\5\20"+
    "\1\0\2\20\1\0\10\20\1\0\6\20\1\24\1\25"+
    "\1\26\1\27\1\30\1\0\3\20\2\31\3\20\1\0"+
    "\1\32\1\20\1\32\1\33\2\20\1\0\1\20\1\34"+
    "\2\35\1\0\1\20\2\36\6\20\1\0\4\20\1\37"+
    "\1\20\1\0\6\20\1\0\1\20\1\40\1\20\2\41"+
    "\1\0\7\20\1\0\1\20\2\42\3\20\1\0\3\20"+
    "\1\43\1\44\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\3\20\2\45\2\20\1\0\1\20\1\0\3\20\2\46"+
    "\1\0\1\20\1\47\1\20\1\50\1\0\1\20\1\0"+
    "\1\20\2\51\1\20\1\52\2\20\2\53\1\0\3\20"+
    "\2\54\1\20\2\55\2\56\1\57\2\20\2\60\6\20"+
    "\1\61\2\20\1\62\1\20\1\63\1\64\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\2\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\274\0\u011a"+
    "\0\u0149\0\274\0\u0178\0\274\0\u01a7\0\u01d6\0\274\0\274"+
    "\0\274\0\274\0\274\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1"+
    "\0\274\0\u05e0\0\274\0\u060f\0\u0149\0\u0178\0\274\0\274"+
    "\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\274\0\274\0\274\0\274\0\274"+
    "\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\274\0\u0149\0\u0d67\0\u0d96"+
    "\0\u0dc5\0\u0df4\0\274\0\u0e23\0\u0149\0\u0149\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0149\0\274\0\u0149\0\u0f0e\0\u0f3d\0\274"+
    "\0\u0149\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086"+
    "\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u0149\0\u1171\0\u11a0\0\u11cf"+
    "\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u0149"+
    "\0\u1347\0\274\0\u0149\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432"+
    "\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\274\0\u0149\0\u154c"+
    "\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u0149\0\u0149"+
    "\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de"+
    "\0\u180d\0\274\0\u0149\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8"+
    "\0\u1927\0\u1956\0\u1985\0\274\0\u0149\0\u19b4\0\u19e3\0\u0149"+
    "\0\u1a12\0\u0149\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\274\0\u0149"+
    "\0\u1afd\0\u0149\0\u1b2c\0\u1b5b\0\274\0\u0149\0\u1b8a\0\u1bb9"+
    "\0\u1be8\0\u1c17\0\274\0\u0149\0\u1c46\0\274\0\u0149\0\274"+
    "\0\u0149\0\u0149\0\u1c75\0\u1ca4\0\274\0\u0149\0\u1cd3\0\u1d02"+
    "\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u0149\0\u1ded\0\u1e1c\0\u0149"+
    "\0\u1e4b\0\u0149\0\u0149\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36"+
    "\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\274\0\u0149";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\7\1\15\1\16\1\5\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\5\2\11\1\25\1\26\1\27\1\11"+
    "\1\30\1\31\2\11\1\32\1\33\1\5\1\11\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\11\1\45\1\5\2\7\1\46\1\14\5\7\2\14"+
    "\42\7\1\47\3\7\1\50\1\51\5\7\2\51\45\7"+
    "\1\52\1\46\1\14\14\52\1\53\35\52\1\54\1\5"+
    "\61\0\1\7\60\0\1\10\56\0\2\55\1\0\1\55"+
    "\12\0\1\55\1\0\6\55\1\0\5\55\1\0\13\55"+
    "\7\0\2\56\14\0\1\56\1\0\6\56\1\0\5\56"+
    "\1\0\13\56\16\0\1\57\57\0\1\60\46\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\61\1\62\5\55\1\0"+
    "\5\55\1\0\13\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\6\55\1\0\1\55\1\63\1\64\2\55"+
    "\1\0\13\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\5\55\1\65\1\66\12\55\7\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\3\55\1\67"+
    "\2\55\1\0\5\55\1\0\1\55\1\70\1\55\1\71"+
    "\7\55\37\0\1\72\11\0\1\73\14\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\1\55\1\74"+
    "\3\55\1\0\5\55\1\75\5\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\3\55\1\76\1\55\1\77"+
    "\1\0\1\55\1\100\3\55\1\0\13\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\101\1\102\2\55\1\103"+
    "\2\55\1\0\5\55\1\0\13\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\104\1\105\5\55\1\0\5\55"+
    "\1\0\13\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\5\55\1\0\5\55\1\106\5\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\5\55"+
    "\1\107\1\0\5\55\1\0\13\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\3\55\1\110\2\55\1\0"+
    "\5\55\1\0\5\55\1\111\5\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\2\55\1\112\3\55\1\0"+
    "\5\55\1\0\6\55\1\113\4\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\5\55\1\0"+
    "\5\55\1\114\5\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\115\1\116\4\55\1\117\1\0\5\55\1\0"+
    "\5\55\1\120\5\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\5\55\1\121\1\0\5\55\1\0\13\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\1\55\1\122\1\123\2\55\1\0\13\55\23\0"+
    "\1\124\40\0\1\14\74\0\1\51\40\0\1\51\54\0"+
    "\1\52\2\0\14\52\1\0\35\52\21\0\1\125\6\0"+
    "\1\126\15\0\1\127\2\0\1\130\34\0\1\131\35\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\1\55\1\132"+
    "\4\55\1\0\5\55\1\0\13\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\5\55\1\0"+
    "\3\55\1\133\7\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\6\55\1\0\5\55\1\0\3\55\1\134"+
    "\7\55\32\0\1\135\33\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\3\55\1\136\2\55\1\0\5\55\1\0"+
    "\13\55\7\0\2\55\1\0\1\55\12\0\1\55\1\0"+
    "\6\55\1\0\5\55\1\0\3\55\1\137\7\55\7\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\3\55\1\140"+
    "\2\55\1\0\5\55\1\0\13\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\5\55\1\141\1\0\5\55"+
    "\1\0\13\55\40\0\1\142\70\0\1\143\13\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\0\6\55\1\0\2\55"+
    "\1\144\2\55\1\0\13\55\7\0\2\55\1\0\1\55"+
    "\12\0\1\55\1\0\6\55\1\0\5\55\1\0\6\55"+
    "\1\145\4\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\5\55\1\0\4\55\1\146\6\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\3\55"+
    "\1\147\2\55\1\0\5\55\1\0\13\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\0\6\55\1\0\3\55"+
    "\1\150\1\55\1\0\13\55\47\0\1\151\16\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\0\6\55\1\0\5\55"+
    "\1\0\3\55\1\152\7\55\7\0\2\55\1\0\1\55"+
    "\12\0\1\153\1\0\6\55\1\0\5\55\1\0\13\55"+
    "\31\0\1\154\34\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\2\55\1\155\3\55\1\0\5\55\1\0\13\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\156\1\157\4\55\1\0\13\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\5\55\1\160"+
    "\1\161\12\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\5\55\1\0\1\55\1\162\11\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\1\55\1\163\3\55\1\0\6\55\1\164\4\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\2\55\1\165\2\55\1\0\13\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\166\1\0\6\55\1\0\5\55"+
    "\1\0\13\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\2\55\1\167\3\55\1\0\5\55\1\0\13\55"+
    "\52\0\1\170\13\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\5\55\1\0\6\55\1\171\4\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\3\55"+
    "\1\172\2\55\1\0\5\55\1\0\13\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\0\6\55\1\0\5\55"+
    "\1\0\3\55\1\173\7\55\7\0\2\55\1\0\1\55"+
    "\12\0\1\55\1\0\2\55\1\174\3\55\1\0\5\55"+
    "\1\0\13\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\2\55\1\175\3\55\1\0\5\55\1\0\13\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\5\55"+
    "\1\176\1\0\5\55\1\0\13\55\31\0\1\177\34\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\2\55\1\200"+
    "\3\55\1\0\5\55\1\0\13\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\5\55\1\0"+
    "\6\55\1\201\4\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\6\55\1\0\5\55\1\0\5\55\1\202"+
    "\5\55\7\0\2\55\1\0\1\55\12\0\1\55\1\0"+
    "\2\55\1\203\3\55\1\0\5\55\1\0\13\55\7\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\6\55\1\0"+
    "\5\55\1\0\2\55\1\204\10\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\3\55\1\205\2\55\1\0"+
    "\5\55\1\0\13\55\41\0\1\206\24\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\3\55\1\207"+
    "\1\55\1\0\13\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\6\55\1\0\3\55\1\210\1\55\1\0"+
    "\13\55\7\0\2\55\1\0\1\55\12\0\1\55\1\0"+
    "\5\55\1\211\1\0\5\55\1\0\13\55\34\0\1\212"+
    "\31\0\2\55\1\0\1\55\12\0\1\55\1\0\5\55"+
    "\1\213\1\0\5\55\1\0\13\55\34\0\1\214\31\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\5\55\1\215"+
    "\1\0\5\55\1\0\13\55\7\0\2\55\1\0\1\55"+
    "\12\0\1\55\1\0\6\55\1\0\5\55\1\0\1\55"+
    "\1\216\11\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\5\55\1\0\6\55\1\217\4\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\5\55"+
    "\1\220\1\0\5\55\1\0\13\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\5\55\1\221\1\0\5\55"+
    "\1\0\13\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\5\55\1\0\2\55\1\222\10\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\5\55\1\0\1\55\1\223\11\55\52\0\1\224"+
    "\13\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\5\55\1\0\6\55\1\225\4\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\0\6\55\1\0\5\55"+
    "\1\226\1\227\12\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\6\55\1\0\3\55\1\230\1\55\1\0"+
    "\13\55\7\0\2\55\1\0\1\55\12\0\1\231\1\0"+
    "\6\55\1\0\5\55\1\0\13\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\5\55\1\0"+
    "\11\55\1\232\1\55\32\0\1\233\33\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\3\55\1\234\2\55\1\0"+
    "\5\55\1\0\13\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\6\55\1\0\1\55\1\235\3\55\1\0"+
    "\13\55\7\0\2\55\1\0\1\55\12\0\1\55\1\0"+
    "\6\55\1\0\5\55\1\0\7\55\1\236\3\55\7\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\6\55\1\0"+
    "\5\55\1\0\2\55\1\237\10\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\3\55\1\240\2\55\1\0"+
    "\5\55\1\0\13\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\6\55\1\0\5\55\1\0\11\55\1\241"+
    "\1\55\37\0\1\242\26\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\6\55\1\0\1\55\1\243\3\55\1\0"+
    "\13\55\7\0\2\55\1\0\1\55\12\0\1\55\1\0"+
    "\6\55\1\244\1\245\4\55\1\0\13\55\53\0\1\246"+
    "\12\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\5\55\1\0\7\55\1\247\3\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\0\6\55\1\0\5\55"+
    "\1\0\5\55\1\250\5\55\7\0\2\55\1\0\1\55"+
    "\12\0\1\55\1\0\6\55\1\0\5\55\1\0\11\55"+
    "\1\251\1\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\252\1\253\4\55\1\0\13\55\7\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\6\55\1\0"+
    "\5\55\1\0\3\55\1\254\7\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\5\55\1\0"+
    "\1\55\1\255\11\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\256\1\257\5\55\1\0\5\55\1\0\13\55"+
    "\26\0\2\260\36\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\260\1\261\5\55\1\0\5\55\1\0\13\55\7\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\6\55\1\0"+
    "\5\55\1\0\5\55\1\262\5\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\5\55\1\0"+
    "\5\55\1\263\5\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\6\55\1\0\5\55\1\264\1\265\12\55"+
    "\33\0\1\266\32\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\4\55\1\267\1\55\1\0\5\55\1\0\13\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\4\55"+
    "\1\270\1\55\1\0\5\55\1\0\13\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\271\1\0\6\55\1\0\5\55"+
    "\1\0\13\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\2\55\1\272\2\55\1\0\13\55"+
    "\41\0\1\273\24\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\3\55\1\274\1\55\1\0\13\55"+
    "\37\0\1\275\26\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\1\55\1\276\3\55\1\0\13\55"+
    "\42\0\1\277\23\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\4\55\1\300\1\0\13\55\7\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\6\55\1\0"+
    "\1\55\1\301\3\55\1\0\13\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\5\55\1\302\1\0\5\55"+
    "\1\0\13\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\5\55\1\0\1\55\1\303\11\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\5\55"+
    "\1\304\1\0\5\55\1\0\13\55\31\0\1\305\34\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\2\55\1\306"+
    "\3\55\1\0\5\55\1\0\13\55\52\0\1\307\13\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\6\55\1\0"+
    "\5\55\1\0\6\55\1\310\4\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\5\55\1\0"+
    "\6\55\1\311\4\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\6\55\1\0\5\55\1\0\6\55\1\312"+
    "\4\55\34\0\1\313\31\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\5\55\1\314\1\0\5\55\1\0\13\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\5\55\1\0\5\55\1\315\5\55\34\0\1\316"+
    "\31\0\2\55\1\0\1\55\12\0\1\55\1\0\5\55"+
    "\1\317\1\0\5\55\1\0\13\55\40\0\1\320\25\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\6\55\1\0"+
    "\2\55\1\321\2\55\1\0\13\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\2\55\1\322\3\55\1\0"+
    "\5\55\1\0\13\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\5\55\1\323\1\0\5\55\1\0\13\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\5\55\1\0\12\55\1\324\54\0\1\325\11\0"+
    "\2\55\1\0\1\55\12\0\1\55\1\0\6\55\1\0"+
    "\5\55\1\0\10\55\1\326\2\55\7\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\2\55\1\327\3\55\1\0"+
    "\5\55\1\0\13\55\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\5\55\1\330\1\0\5\55\1\0\13\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\5\55\1\0\6\55\1\331\4\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\0\6\55\1\0\5\55"+
    "\1\0\12\55\1\332\7\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\5\55\1\333\1\0\5\55\1\0\13\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\2\55\1\334\2\55\1\0\13\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\0\6\55\1\0\5\55"+
    "\1\0\2\55\1\335\10\55\7\0\2\55\1\0\1\55"+
    "\12\0\1\55\1\0\5\55\1\336\1\0\5\55\1\0"+
    "\13\55\7\0\2\55\1\0\1\55\12\0\1\55\1\0"+
    "\5\55\1\337\1\0\5\55\1\0\13\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\0\6\55\1\0\5\55"+
    "\1\0\1\55\1\340\11\55\7\0\2\55\1\0\1\55"+
    "\12\0\1\55\1\0\3\55\1\341\2\55\1\0\5\55"+
    "\1\0\13\55\7\0\2\55\1\0\1\55\12\0\1\55"+
    "\1\0\6\55\1\0\5\55\1\0\2\55\1\342\10\55"+
    "\7\0\2\55\1\0\1\55\12\0\1\55\1\0\6\55"+
    "\1\0\5\55\1\0\1\55\1\343\11\55\7\0\2\55"+
    "\1\0\1\55\12\0\1\55\1\0\6\55\1\344\1\345"+
    "\4\55\1\0\13\55\31\0\1\346\34\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\2\55\1\347\3\55\1\0"+
    "\5\55\1\0\13\55\47\0\1\350\16\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\6\55\1\0\5\55\1\0"+
    "\3\55\1\351\7\55\34\0\1\352\31\0\2\55\1\0"+
    "\1\55\12\0\1\55\1\0\5\55\1\353\1\0\5\55"+
    "\1\0\13\55\34\0\1\354\31\0\2\55\1\0\1\55"+
    "\12\0\1\55\1\0\5\55\1\355\1\0\5\55\1\0"+
    "\13\55\31\0\1\356\34\0\2\55\1\0\1\55\12\0"+
    "\1\55\1\0\2\55\1\357\3\55\1\0\5\55\1\0"+
    "\13\55\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8272];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\5\11\25\1\1\11\1\1\1\11\3\1\2\11"+
    "\1\0\3\1\1\0\4\1\2\0\5\1\1\0\2\1"+
    "\1\0\10\1\1\0\6\1\5\11\1\0\3\1\1\11"+
    "\4\1\1\0\1\11\5\1\1\0\2\1\1\11\1\1"+
    "\1\0\1\1\1\11\7\1\1\0\6\1\1\0\6\1"+
    "\1\0\3\1\1\11\1\1\1\0\7\1\1\0\1\1"+
    "\1\11\4\1\1\0\6\1\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\11\3\1\1\0\1\1\1\0\3\1"+
    "\1\11\1\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\11\5\1\1\11\1\1\1\0\3\1\1\11\2\1"+
    "\1\11\1\1\1\11\4\1\1\11\16\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private String filename;
	public String getFilename() {
		return filename;
	}

    public void setFilename(String filename) {
        this.filename = filename;
    }


    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(new InputStreamReader(is));
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }

    private StringBuffer string = new StringBuffer();
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(filename, yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(filename, yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code,
						new Location(filename, yyline+1, yycolumn +1, yychar),
						new Location(filename, yyline+1,yycolumn+yylength
						(), yychar+yylength()), lexem);
    }

     private Symbol symbol(String name, int sym, Object val,int buflength) {
          Location left = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
          Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
          return symbolFactory.newSymbol(name, sym, left, right,val);
     }

    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }

    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" +
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }

    // Removes a prefix, and gets rid of underscores
    protected String filterNumber(String text, int prefix) {
    	return text.substring(prefix).codePoints()
    		.filter(cp -> cp != '_')
    		.collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)
    		.toString();
    }

    protected String filterNumber(String text) {
    	return filterNumber(text, 0);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol("EOF",sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal Character \"" + yytext() +
                          "\" at line " + yyline+1 + ", column " + yycolumn+1);
            }
          case 54: break;
          case 2: 
            { 
            }
          case 55: break;
          case 3: 
            { return symbol("DIGIT", DIGIT, yytext());
            }
          case 56: break;
          case 4: 
            { return symbol("PUNC", PUNC);
            }
          case 57: break;
          case 5: 
            { /* end of line */
            }
          case 58: break;
          case 6: 
            { return symbol("COLON", COLON);
            }
          case 59: break;
          case 7: 
            { return symbol("DOLLA", DOLLA);
            }
          case 60: break;
          case 8: 
            { return symbol("HASHTAG", HASHTAG);
            }
          case 61: break;
          case 9: 
            { return symbol("QM", QM);
            }
          case 62: break;
          case 10: 
            { return symbol("STAR", STAR);
            }
          case 63: break;
          case 11: 
            { return symbol("AT", AT);
            }
          case 64: break;
          case 12: 
            { yybegin(YYINITIAL);
            }
          case 65: break;
          case 13: 
            { string.append( yytext() );
            }
          case 66: break;
          case 14: 
            { yybegin(YYINITIAL);
                                   return symbol("WORDONTHASTREET", WORDONTHASTREET_LIT, string.toString(), string.length()+1);
            }
          case 67: break;
          case 15: 
            { string.append('\\');
            }
          case 68: break;
          case 16: 
            { return symbol("IDENTIFIER", IDENTIFIER, yytext());
            }
          case 69: break;
          case 17: 
            { return symbol("STREETNAME", STREETNAME, yytext());
            }
          case 70: break;
          case 18: 
            { return symbol("LPAREN", LPAREN);
            }
          case 71: break;
          case 19: 
            { return symbol("RPAREN", RPAREN);
            }
          case 72: break;
          case 20: 
            { yybegin(SQUIGGLYSTAR);
            }
          case 73: break;
          case 21: 
            { string.append('\"');
            }
          case 74: break;
          case 22: 
            { string.append('\t');
            }
          case 75: break;
          case 23: 
            { string.append('\r');
            }
          case 76: break;
          case 24: 
            { string.append('\n');
            }
          case 77: break;
          case 25: 
            { return symbol("AKA", AKA);
            }
          case 78: break;
          case 26: 
            { return symbol("SON", SON);
            }
          case 79: break;
          case 27: 
            { return symbol("DAB", DAB);
            }
          case 80: break;
          case 28: 
            { return symbol("FAM", FAM);
            }
          case 81: break;
          case 29: 
            { return symbol("LIT", LIT);
            }
          case 82: break;
          case 30: 
            { return symbol("REK", REK);
            }
          case 83: break;
          case 31: 
            { return symbol("CUT", CUT);
            }
          case 84: break;
          case 32: 
            { return symbol("DEAD", DEAD);
            }
          case 85: break;
          case 33: 
            { return symbol("FIRE", FIRE);
            }
          case 86: break;
          case 34: 
            { return symbol("WEAK", WEAK);
            }
          case 87: break;
          case 35: 
            { return symbol("PARTY", PARTY);
            }
          case 88: break;
          case 36: 
            { return symbol("PLAYA", PLAYA);
            }
          case 89: break;
          case 37: 
            { return symbol("BONES", BONES);
            }
          case 90: break;
          case 38: 
            { return symbol("CHECK", CHECK);
            }
          case 91: break;
          case 39: 
            { return symbol("TURNUP", TURNUP);
            }
          case 92: break;
          case 40: 
            { return symbol("PREACH", PREACH);
            }
          case 93: break;
          case 41: 
            { return symbol("YOSEWF", YOSEWF);
            }
          case 94: break;
          case 42: 
            { return symbol("BOUNCE", BOUNCE);
            }
          case 95: break;
          case 43: 
            { return symbol("NOTLIT", NOTLIT);
            }
          case 96: break;
          case 44: 
            { return symbol("MIXTAPE", MIXTAPE);
            }
          case 97: break;
          case 45: 
            { return symbol("SUHDUDE", SUHDUDE);
            }
          case 98: break;
          case 46: 
            { return symbol("DUDESUH", DUDESUH);
            }
          case 99: break;
          case 47: 
            { return symbol("BALLOUT", BALLOUT);
            }
          case 100: break;
          case 48: 
            { return symbol("WINNING", WINNING);
            }
          case 101: break;
          case 49: 
            { return symbol("GETMONEY", GETMONEY);
            }
          case 102: break;
          case 50: 
            { return symbol("ONMYLEVEL", ONMYLEVEL);
            }
          case 103: break;
          case 51: 
            { return symbol("THROWMONEY", THROWMONEY);
            }
          case 104: break;
          case 52: 
            { return symbol("OTHERLEVEL", OTHERLEVEL);
            }
          case 105: break;
          case 53: 
            { return symbol("WORDONTHASTREET", WORDONTHASTREET);
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
